// run

// Copyright 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"log"
	"strconv"
)

type Setter interface {
	Set(string)
}

func FromStrings[type *T Setter](s []string) []T {
	result := make([]T, len(s))
	for i, v := range s {
		// result[i] is an addressable value of type T,
		// so it's OK to call Set.
		result[i].Set(v)
	}
	return result
}

type Settable int

func (p *Settable) Set(s string) {
	i, err := strconv.Atoi(s)
	if err != nil {
		log.Fatal(err)
	}
	*p = Settable(i)
}

func main() {
	s := FromStrings[Settable]([]string{"1"})
	if len(s) != 1 || s[0] != 1 {
		log.Fatalf("got %v, want %v", s, []int{1})
	}
}
