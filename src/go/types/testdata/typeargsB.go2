// Copyright 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test instantiations of type parameters with pointer designation.
//
// When we have a type parameter with a pointer designation
//
//      [type *T Constraint]
//
// we are saying that *T must satisfy Constraint. One way of emulating
// this without pointer designation is to translate the above type
// parameter list to
//
//      [type PT interface{ Constraint; type *T }, T interface{}]
//
// with two type parameters, where PT has the additional constraint
// that it must be a *T.

package p

func e[type T]() {
	e[T]()
	e[*T]()
	ep[T]()
	ep[*T]()
}

func ep[type *T]() {
	e[T]()
	e[*T]()
	ep[T]()
	ep[*T]()
}

func et[type T interface{type int}]() {
	et(T)()
	et(* /* ERROR \*T not found in int */ T)()
	// etp(T /* ERROR \*T not found in int */ )() // TODO(gri) fix this
	etp(* /* ERROR \*T not found in int */ T)()
}

func etp[type *T interface{type int}]() {
	// et(T /* ERROR T not found in int */ )() // TODO(gri) Fix this
	et(* /* ERROR \*T not found in int */ T)()
	etp(T)()
	etp(* /* ERROR \*T not found in int */ T)()
}

func f[type T interface { m() }]() {
	// Use functions to produce non-addressable values of the respective types.
	func() (_  T) { return }().m()                      // method set of T is { m }  (per declaration)
	func() (_ *T) { return }().m()                      // method set of *T is { m } (implicit deref *T to get T value)

	var x T
	x.m()                                               // method set of T is { m }  (per declaration)
	var xp *T
	xp.m()                                              // method set of *T is { m } (implicit deref *T to get T value)

	f(T)()                                              // method set of T is { m }  (per declaration)
	f(* /* ERROR \*T has no methods */ T)()             // method set of *T is {}
	fp(T /* ERROR pointer designation mismatch */ )()
	fp(* /* ERROR \*T has no methods */ T)()            // method set of *T is {}
}

func fp[type *T interface { m() }]() {
	// Use functions to produce non-addressable values of the respective types.
	func() (_  T) { return }().m /* ERROR cannot call pointer method m */ () // method set of T is {}, receiver is not addressable
	func() (_ *T) { return }().m()                      // method set of *T is { m }

	var x T
	x.m()                                               // method set of *T is { m }  (x is addressable)
	var xp *T
	xp.m()                                              // method set of *T is { m }  (per declaration)

	f(T /* ERROR pointer designation mismatch */ )()
	f(* /* ERROR \*T has no methods */ T)()             // method set of **T is {}
	fp(T)()                                             // method set of *T is { m }
	fp(* /* ERROR \*T has no methods */ T)()            // method set of **T is {}
}

type S struct{}
func (S) m()

type Sp struct{}
func (*Sp) m()

func _() {
	S{}.m()                                             // method set of S is { m }   (per declaration)
	Sp{}.m /* ERROR cannot call pointer method m */ ()  // method set of Sp is {}
	(&S{}).m()                                          // method set of *S is { m }  (deref *S value to get S value)
	(&Sp{}).m()                                         // method set of *Sp is { m } (per declaration)

	var s S
	s.m()                                   // method set of S is { m }   (per declaration)
	var sp Sp
	sp.m()                                  // method set of &Sp is { m } (sp is addressable)
	var ps *S
	ps.m()                                  // method set of *S is { m }  (deref *S value to get S value)
	var psp *Sp
	psp.m()                                 // method set of *Sp is { m } (per declaration)

	f(S)()                                  // method set of S is { m }
	f(Sp /* ERROR missing method m */ )()   // method set of Sp is {}
	f(*S)()                                 // method set of *S is { m }
	f(*Sp)()                                // method set of *Sp is { m }

	fp(S)()                                 // method set of *S is { m }
	fp(Sp)()                                // method set of *Sp is { m }
	fp(* /* ERROR missing method m */ S)()  // method set of **S is {}
	fp(* /* ERROR missing method m */ Sp)() // method set of **Sp is {}
}

// Example from design doc

type Setter interface {
    Set(string)
}

func Strings[type T Setter](s []string) []T {
    result := make([]T, len(s))
    for i, v := range s {
        result[i].Set(v)
    }
    return result
}

type Settable int

func (p *Settable) Set(s string) {
    *p = 0
}

func F() {
    Strings[Settable /* ERROR missing method Set */ ]([]string{"1"})
}
