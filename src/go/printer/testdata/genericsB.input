// Copyright 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package generics

type T[type] struct{}
type T[type P] struct{}
type T[type P1, P2, P3] struct{}

type T[type P C] struct{}
type T[type P1, P2, P3, C] struct{}

type T[type P C[P]] struct{}
type T[type P1, P2, P3 C[P1, P2, P3]] struct{}

func f[type]()
func f[type P](x P)
func f[type P1, P2, P3](x1 P1, x2 P2, x3 P3) struct{}

func f[type]()
func f[type P interface{}](x P)
func f[type P1, P2, P3 interface{ m1(P1); type P2, P3 }](x1 P1, x2 P2, x3 P3) struct{}
func f[type P](T1[P], T2[P]) T3[P]

func (x T[P]) m()
func ((T[P])) m(x T[P]) P

func _() {
	type _ []T[P]
	var _ []T[P]
	_ = []T[P]{}
}
